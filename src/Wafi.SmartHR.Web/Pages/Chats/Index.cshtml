@page "/chat"
@model Wafi.SmartHR.Web.Pages.Chats.IndexModel
@{
    ViewData["Title"] = "Chat with AI";
}

<div class="chat-container">
    <h2 class="chat-title">Chat with AI Assistant</h2>

    <div id="chat-messages" class="chat-messages">
        @foreach (var msg in Model.Conversation)
        {
            <div class="message @(msg.Sender == "User" ? "user-message" : "ai-message")">
                <div class="message-header">
                    <div class="message-sender">@msg.Sender</div>
                    <div class="message-time">@(msg.CreationTime.ToString("t"))</div>
                </div>
                <div class="message-content">@msg.Content</div>
            </div>
        }
    </div>

    <form method="post" class="message-form" id="chat-form">
        <div class="input-group">
            <textarea name="UserMessage" id="user-input" class="message-input" placeholder="Type your message here..." required>@Model.UserMessage</textarea>
            <button type="submit" class="send-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
            </button>
        </div>
    </form>
</div>

<style>
    /* Base styles */
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        display: flex;
        flex-direction: column;
    }

    .chat-title {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 20px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: inset 0 0 5px rgba(0,0,0,0.1);
        scroll-behavior: smooth;
    }

    .message {
        margin-bottom: 15px;
        padding: 12px 16px;
        border-radius: 12px;
        max-width: 75%;
        line-height: 1.4;
        opacity: 0;
        transform: translateY(10px);
        animation: fadeIn 0.4s forwards;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 6px;
    }

    .message-sender {
        font-weight: bold;
        font-size: 0.85em;
    }

    .message-time {
        font-size: 0.75em;
        color: #6c757d;
        opacity: 0.8;
    }

    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 4px;
        animation-delay: 0.1s;
    }

        .user-message .message-time {
            color: rgba(255,255,255,0.7);
        }

    .ai-message {
        background-color: #e9ecef;
        color: #212529;
        margin-right: auto;
        border-bottom-left-radius: 4px;
        animation-delay: 0.3s;
    }

    .message-form {
        margin-top: auto;
    }

    .input-group {
        display: flex;
        gap: 10px;
    }

    .message-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        resize: none;
        font-family: inherit;
        font-size: 16px;
        min-height: 60px;
        transition: border 0.3s;
    }

        .message-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }

    .send-button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0 20px;
        cursor: pointer;
        transition: background-color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .send-button svg {
            width: 20px;
            height: 20px;
        }

    /* Typing indicator styles */
    .typing-indicator {
        display: inline-flex;
        gap: 4px;
        align-items: center;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        background-color: #6c757d;
        border-radius: 50%;
        animation: typingAnimation 1.4s infinite ease-in-out;
    }

        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

    /* Keyframes definitions */
    @@keyframes fadeIn {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes typingAnimation {
        0%, 60%, 100% {
            transform: translateY(0);
            opacity: 0.6;
        }

        30% {
            transform: translateY(-5px);
            opacity: 1;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatForm = document.getElementById('chat-form');
        const chatMessages = document.getElementById('chat-messages');
        const userInput = document.getElementById('user-input');

        // Scroll to bottom initially
        scrollToBottom();

        chatForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const message = userInput.value.trim();
            if (message === '') return;

            // Add user message immediately with animation
            addMessage('User', message, true);
            userInput.value = '';

            // Show typing indicator
            showTypingIndicator();

            // Simulate AI response after delay
            setTimeout(() => {
                removeTypingIndicator();
                addMessage('AI', "This is a simulated response. Replace with actual AI reply.", false);
            }, 2000);

            return false;
        });

        function addMessage(sender, content, isUser) {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            messageDiv.innerHTML = `
                <div class="message-header">
                    <div class="message-sender">${sender}</div>
                    <div class="message-time">${timeString}</div>
                </div>
                <div class="message-content">${content}</div>
            `;

            const typingIndicator = document.querySelector('.typing-indicator-container');
            if (typingIndicator) {
                chatMessages.replaceChild(messageDiv, typingIndicator);
            } else {
                chatMessages.appendChild(messageDiv);
            }

            scrollToBottom();
        }

        function showTypingIndicator() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            const typingDiv = document.createElement('div');
            typingDiv.className = 'message ai-message typing-indicator-container';
            typingDiv.innerHTML = `
                <div class="message-header">
                    <div class="message-sender">AI</div>
                    <div class="message-time">${timeString}</div>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;

            chatMessages.appendChild(typingDiv);
            scrollToBottom();
        }

        function removeTypingIndicator() {
            const typingIndicator = document.querySelector('.typing-indicator-container');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    });
</script>